// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::fbs::trade_generated::*;
use crate::fbs::order_generated::*;

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod spot_log {

  use crate::fbs::trade_generated::*;
  use crate::fbs::order_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LOG_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LOG_TYPE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LOG_TYPE: [LogType; 3] = [
  LogType::NewOrder,
  LogType::CancelOrder,
  LogType::Trade,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LogType(pub i8);
#[allow(non_upper_case_globals)]
impl LogType {
  pub const NewOrder: Self = Self(0);
  pub const CancelOrder: Self = Self(1);
  pub const Trade: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NewOrder,
    Self::CancelOrder,
    Self::Trade,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NewOrder => Some("NewOrder"),
      Self::CancelOrder => Some("CancelOrder"),
      Self::Trade => Some("Trade"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LogType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LogType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LogType {
    type Output = LogType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LogType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LogType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LogType {}
pub enum SpotLogOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpotLog<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpotLog<'a> {
  type Inner = SpotLog<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpotLog<'a> {
  pub const VT_LOG_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_SEQ_ID: flatbuffers::VOffsetT = 6;
  pub const VT_ORDER: flatbuffers::VOffsetT = 8;
  pub const VT_TRADE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpotLog { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SpotLogArgs<'args>
  ) -> flatbuffers::WIPOffset<SpotLog<'bldr>> {
    let mut builder = SpotLogBuilder::new(_fbb);
    builder.add_seq_id(args.seq_id);
    if let Some(x) = args.trade { builder.add_trade(x); }
    if let Some(x) = args.order { builder.add_order(x); }
    builder.add_log_type(args.log_type);
    builder.finish()
  }


  #[inline]
  pub fn log_type(&self) -> LogType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LogType>(SpotLog::VT_LOG_TYPE, Some(LogType::NewOrder)).unwrap()}
  }
  #[inline]
  pub fn seq_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SpotLog::VT_SEQ_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn order(&self) -> Option<super::order::Order<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::order::Order>>(SpotLog::VT_ORDER, None)}
  }
  #[inline]
  pub fn trade(&self) -> Option<super::trade::Trade<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::trade::Trade>>(SpotLog::VT_TRADE, None)}
  }
}

impl flatbuffers::Verifiable for SpotLog<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<LogType>("log_type", Self::VT_LOG_TYPE, false)?
     .visit_field::<u64>("seq_id", Self::VT_SEQ_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::order::Order>>("order", Self::VT_ORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::trade::Trade>>("trade", Self::VT_TRADE, false)?
     .finish();
    Ok(())
  }
}
pub struct SpotLogArgs<'a> {
    pub log_type: LogType,
    pub seq_id: u64,
    pub order: Option<flatbuffers::WIPOffset<super::order::Order<'a>>>,
    pub trade: Option<flatbuffers::WIPOffset<super::trade::Trade<'a>>>,
}
impl<'a> Default for SpotLogArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpotLogArgs {
      log_type: LogType::NewOrder,
      seq_id: 0,
      order: None,
      trade: None,
    }
  }
}

pub struct SpotLogBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SpotLogBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_log_type(&mut self, log_type: LogType) {
    self.fbb_.push_slot::<LogType>(SpotLog::VT_LOG_TYPE, log_type, LogType::NewOrder);
  }
  #[inline]
  pub fn add_seq_id(&mut self, seq_id: u64) {
    self.fbb_.push_slot::<u64>(SpotLog::VT_SEQ_ID, seq_id, 0);
  }
  #[inline]
  pub fn add_order(&mut self, order: flatbuffers::WIPOffset<super::order::Order<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::order::Order>>(SpotLog::VT_ORDER, order);
  }
  #[inline]
  pub fn add_trade(&mut self, trade: flatbuffers::WIPOffset<super::trade::Trade<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::trade::Trade>>(SpotLog::VT_TRADE, trade);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SpotLogBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SpotLogBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpotLog<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpotLog<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpotLog");
      ds.field("log_type", &self.log_type());
      ds.field("seq_id", &self.seq_id());
      ds.field("order", &self.order());
      ds.field("trade", &self.trade());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SpotLog`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spot_log_unchecked`.
pub fn root_as_spot_log(buf: &[u8]) -> Result<SpotLog, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SpotLog>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SpotLog` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_spot_log_unchecked`.
pub fn size_prefixed_root_as_spot_log(buf: &[u8]) -> Result<SpotLog, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SpotLog>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SpotLog` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spot_log_unchecked`.
pub fn root_as_spot_log_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpotLog<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SpotLog<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SpotLog` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spot_log_unchecked`.
pub fn size_prefixed_root_as_spot_log_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpotLog<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SpotLog<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SpotLog and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SpotLog`.
pub unsafe fn root_as_spot_log_unchecked(buf: &[u8]) -> SpotLog {
  flatbuffers::root_unchecked::<SpotLog>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SpotLog and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SpotLog`.
pub unsafe fn size_prefixed_root_as_spot_log_unchecked(buf: &[u8]) -> SpotLog {
  flatbuffers::size_prefixed_root_unchecked::<SpotLog>(buf)
}
#[inline]
pub fn finish_spot_log_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SpotLog<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_spot_log_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SpotLog<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod spot_log

