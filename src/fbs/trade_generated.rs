// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod trade {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TradeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Trade<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Trade<'a> {
  type Inner = Trade<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Trade<'a> {
  pub const VT_BUY_ORDER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SELL_ORDER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_PRICE: flatbuffers::VOffsetT = 8;
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 10;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Trade { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TradeArgs
  ) -> flatbuffers::WIPOffset<Trade<'bldr>> {
    let mut builder = TradeBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_quantity(args.quantity);
    builder.add_price(args.price);
    builder.add_sell_order_id(args.sell_order_id);
    builder.add_buy_order_id(args.buy_order_id);
    builder.finish()
  }


  #[inline]
  pub fn buy_order_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Trade::VT_BUY_ORDER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sell_order_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Trade::VT_SELL_ORDER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Trade::VT_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn quantity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Trade::VT_QUANTITY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Trade::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Trade<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("buy_order_id", Self::VT_BUY_ORDER_ID, false)?
     .visit_field::<u64>("sell_order_id", Self::VT_SELL_ORDER_ID, false)?
     .visit_field::<f64>("price", Self::VT_PRICE, false)?
     .visit_field::<f64>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct TradeArgs {
    pub buy_order_id: u64,
    pub sell_order_id: u64,
    pub price: f64,
    pub quantity: f64,
    pub timestamp: u64,
}
impl<'a> Default for TradeArgs {
  #[inline]
  fn default() -> Self {
    TradeArgs {
      buy_order_id: 0,
      sell_order_id: 0,
      price: 0.0,
      quantity: 0.0,
      timestamp: 0,
    }
  }
}

pub struct TradeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TradeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_buy_order_id(&mut self, buy_order_id: u64) {
    self.fbb_.push_slot::<u64>(Trade::VT_BUY_ORDER_ID, buy_order_id, 0);
  }
  #[inline]
  pub fn add_sell_order_id(&mut self, sell_order_id: u64) {
    self.fbb_.push_slot::<u64>(Trade::VT_SELL_ORDER_ID, sell_order_id, 0);
  }
  #[inline]
  pub fn add_price(&mut self, price: f64) {
    self.fbb_.push_slot::<f64>(Trade::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_quantity(&mut self, quantity: f64) {
    self.fbb_.push_slot::<f64>(Trade::VT_QUANTITY, quantity, 0.0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Trade::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TradeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TradeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Trade<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Trade<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Trade");
      ds.field("buy_order_id", &self.buy_order_id());
      ds.field("sell_order_id", &self.sell_order_id());
      ds.field("price", &self.price());
      ds.field("quantity", &self.quantity());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Trade`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trade_unchecked`.
pub fn root_as_trade(buf: &[u8]) -> Result<Trade, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Trade>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Trade` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trade_unchecked`.
pub fn size_prefixed_root_as_trade(buf: &[u8]) -> Result<Trade, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Trade>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Trade` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trade_unchecked`.
pub fn root_as_trade_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trade<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Trade<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Trade` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trade_unchecked`.
pub fn size_prefixed_root_as_trade_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trade<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Trade<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Trade and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Trade`.
pub unsafe fn root_as_trade_unchecked(buf: &[u8]) -> Trade {
  flatbuffers::root_unchecked::<Trade>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Trade and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Trade`.
pub unsafe fn size_prefixed_root_as_trade_unchecked(buf: &[u8]) -> Trade {
  flatbuffers::size_prefixed_root_unchecked::<Trade>(buf)
}
#[inline]
pub fn finish_trade_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Trade<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trade_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Trade<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod trade

