// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod order {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SIDE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SIDE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SIDE: [Side; 2] = [
  Side::Buy,
  Side::Sell,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Side(pub i8);
#[allow(non_upper_case_globals)]
impl Side {
  pub const Buy: Self = Self(0);
  pub const Sell: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Buy,
    Self::Sell,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Buy => Some("Buy"),
      Self::Sell => Some("Sell"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Side {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Side {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Side {
    type Output = Side;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Side {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Side {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Side {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ORDER_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ORDER_TYPE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ORDER_TYPE: [OrderType; 2] = [
  OrderType::Limit,
  OrderType::Market,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OrderType(pub i8);
#[allow(non_upper_case_globals)]
impl OrderType {
  pub const Limit: Self = Self(0);
  pub const Market: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Limit,
    Self::Market,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Limit => Some("Limit"),
      Self::Market => Some("Market"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OrderType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OrderType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OrderType {
    type Output = OrderType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OrderType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OrderType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OrderType {}
pub enum OrderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Order<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Order<'a> {
  type Inner = Order<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Order<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_USER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_PRICE: flatbuffers::VOffsetT = 8;
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 10;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 12;
  pub const VT_ORDER_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_SIDE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Order { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderArgs
  ) -> flatbuffers::WIPOffset<Order<'bldr>> {
    let mut builder = OrderBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_quantity(args.quantity);
    builder.add_price(args.price);
    builder.add_user_id(args.user_id);
    builder.add_id(args.id);
    builder.add_side(args.side);
    builder.add_order_type(args.order_type);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Order::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn user_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Order::VT_USER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Order::VT_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn quantity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Order::VT_QUANTITY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Order::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn order_type(&self) -> OrderType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OrderType>(Order::VT_ORDER_TYPE, Some(OrderType::Limit)).unwrap()}
  }
  #[inline]
  pub fn side(&self) -> Side {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Side>(Order::VT_SIDE, Some(Side::Buy)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Order<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u64>("user_id", Self::VT_USER_ID, false)?
     .visit_field::<f64>("price", Self::VT_PRICE, false)?
     .visit_field::<f64>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<OrderType>("order_type", Self::VT_ORDER_TYPE, false)?
     .visit_field::<Side>("side", Self::VT_SIDE, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderArgs {
    pub id: u64,
    pub user_id: u64,
    pub price: f64,
    pub quantity: f64,
    pub timestamp: u64,
    pub order_type: OrderType,
    pub side: Side,
}
impl<'a> Default for OrderArgs {
  #[inline]
  fn default() -> Self {
    OrderArgs {
      id: 0,
      user_id: 0,
      price: 0.0,
      quantity: 0.0,
      timestamp: 0,
      order_type: OrderType::Limit,
      side: Side::Buy,
    }
  }
}

pub struct OrderBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Order::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_user_id(&mut self, user_id: u64) {
    self.fbb_.push_slot::<u64>(Order::VT_USER_ID, user_id, 0);
  }
  #[inline]
  pub fn add_price(&mut self, price: f64) {
    self.fbb_.push_slot::<f64>(Order::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_quantity(&mut self, quantity: f64) {
    self.fbb_.push_slot::<f64>(Order::VT_QUANTITY, quantity, 0.0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Order::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_order_type(&mut self, order_type: OrderType) {
    self.fbb_.push_slot::<OrderType>(Order::VT_ORDER_TYPE, order_type, OrderType::Limit);
  }
  #[inline]
  pub fn add_side(&mut self, side: Side) {
    self.fbb_.push_slot::<Side>(Order::VT_SIDE, side, Side::Buy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Order<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Order<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Order");
      ds.field("id", &self.id());
      ds.field("user_id", &self.user_id());
      ds.field("price", &self.price());
      ds.field("quantity", &self.quantity());
      ds.field("timestamp", &self.timestamp());
      ds.field("order_type", &self.order_type());
      ds.field("side", &self.side());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Order`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn root_as_order(buf: &[u8]) -> Result<Order, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Order>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Order` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_unchecked`.
pub fn size_prefixed_root_as_order(buf: &[u8]) -> Result<Order, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Order>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Order` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn root_as_order_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Order<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Order<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Order` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn size_prefixed_root_as_order_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Order<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Order<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Order and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Order`.
pub unsafe fn root_as_order_unchecked(buf: &[u8]) -> Order {
  flatbuffers::root_unchecked::<Order>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Order and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Order`.
pub unsafe fn size_prefixed_root_as_order_unchecked(buf: &[u8]) -> Order {
  flatbuffers::size_prefixed_root_unchecked::<Order>(buf)
}
#[inline]
pub fn finish_order_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Order<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Order<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod order

